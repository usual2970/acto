openapi: 3.0.3
info:
  title: Points System API
  version: 0.1.0
  description: REST API for multi-type integer points system
servers:
  - url: /api/v1
paths:
  /point-types:
    get:
      summary: List point types
      responses:
        "200": { description: OK }
    post:
      summary: Create point type
      responses:
        "201": { description: Created }
  /point-types/{id}:
    patch:
      summary: Update point type
      responses:
        "200": { description: OK }
    delete:
      summary: Delete point type (no active balances)
      responses:
        "204": { description: No Content }
  /users/balance/credit:
    post:
      summary: Credit points by point type name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditDebitRequest"
      responses:
        "200": { description: OK }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict (e.g., insufficient balance)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/balance/debit:
    post:
      summary: Debit points by point type name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditDebitRequest"
      responses:
        "200": { description: OK }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409": { description: Insufficient balance }
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/{userId}/transactions:
    get:
      summary: List user transactions
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: pointTypeName
          required: false
          schema:
            type: string
          description: Filter by point type name
        - in: query
          name: op
          required: false
          schema:
            type: string
            enum: [credit, debit]
          description: Filter by operation type
        - in: query
          name: start
          required: false
          schema:
            type: string
            format: date-time
          description: Start timestamp (inclusive)
        - in: query
          name: end
          required: false
          schema:
            type: string
            format: date-time
          description: End timestamp (exclusive)
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            default: 20
        - in: query
          name: offset
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionsResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /rankings/{pointTypeId}:
    get:
      summary: Get ranking for a point type
      responses:
        "200": { description: OK }
  /rewards:
    get:
      summary: List redemption rewards
      responses:
        "200": { description: OK }
    post:
      summary: Create redemption reward
      responses:
        "201": { description: Created }
  /redeem:
    post:
      summary: Redeem a reward
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedeemRequest"
      responses:
        "200": { description: OK }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409": { description: Out of stock or insufficient balance }
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /distributions:
    post:
      summary: Execute rank-based reward distribution
      responses:
        "202": { description: Accepted }
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: INSUFFICIENT_BALANCE
        message:
          type: string
        details:
          nullable: true
      required: [code, message]
    CreditDebitRequest:
      type: object
      properties:
        userId:
          type: string
        pointTypeName:
          type: string
        amount:
          type: integer
          format: int64
        reason:
          type: string
      required: [userId, pointTypeName, amount]
    RedeemRequest:
      type: object
      properties:
        userId:
          type: string
        rewardId:
          type: string
      required: [userId, rewardId]
    Transaction:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        pointTypeId: { type: string }
        amount: { type: integer, format: int64 }
        type: { type: string, enum: [credit, debit] }
        reason: { type: string }
        before: { type: integer, format: int64 }
        after: { type: integer, format: int64 }
        createdAt: { type: string, format: date-time }
      required:
        [id, userId, pointTypeId, amount, type, before, after, createdAt]
    TransactionsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
      required: [items, limit, offset]
